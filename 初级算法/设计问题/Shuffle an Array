/*
// 以数字集合 1, 2 和 3 初始化数组。
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。
solution.shuffle();

// 重设数组到它的初始状态[1,2,3]。
solution.reset();

// 随机返回数组[1,2,3]打乱后的结果。
solution.shuffle();
*/

#include<iostream>
#include<vector> 
#include<cstdlib>
using namespace std;
class Solution{
public: 
    Solution(vector<int>& nums):v(nums){
        
    }
    
    /** Resets the array to its original configuration and return it. */
    vector<int> reset() {
        return v;
    }
    
    /** Returns a random shuffling of the array. */
    vector<int> shuffle() { //https://yjk94.wordpress.com/2017/03/17/%E6%B4%97%E7%89%8C%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF-knuth-shuffle%E7%AE%97%E6%B3%95/
        vector<int> result = v;
        for(auto i = 0; i < result.size(); ++i){
            int t = i + rand() % (result.size() - i); //在i之前选保证概率相同
            swap(result[i], result[t]);
        }
        return result;
    }
private:
    vector<int> v;
};

int main(){
    vector<int> a = {1, 2, 3};
    Solution* obj = new Solution(a);
    vector<int> param_1 = obj->reset();
    vector<int> param_2 = obj->shuffle();
    for(auto &i:param_1){
        cout << i << endl;
    }
    for(auto &i:param_2){
        cout << i << endl;
    }
    return 0;
}
